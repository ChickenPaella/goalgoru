buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
		aspectjVersion = '1.8.9'
		hibernateVersion = '5.2.7.Final'
	}
	repositories {
		mavenCentral()
		maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// *.properties file loader.
def loadProjectProperties(properties) {
	def propertiesFileName = properties + '.properties'
	def Properties result = new Properties()
	result.load(new FileInputStream(file("$project.rootDir/src/main/resources/$propertiesFileName")))
	return result
}

def app = loadProjectProperties('application')

war {
	baseName = app['app.name']
	version = app['app.version.name'] + '-' + new Date().format('yyyyMMdd-HHmmss')
}

bootRepackage {
}

repositories {
	//mavenCentral()
	//maven { url "http://repo.maven.apache.org/maven2" }
	jcenter()
	maven { url "http://repo.spring.io/libs-snapshot" }
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}") //AOP
	compile("org.aspectj:aspectjrt:${aspectjVersion}")
    compile("org.aspectj:aspectjweaver:${aspectjVersion}")
    compile("org.springframework.boot:spring-boot-starter-cache:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}") //JPA
    compile("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}") //REST(Repository자동url매핑)
    compile("org.springframework.data:spring-data-rest-hal-browser:2.6.0.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}") //SECURITY
    compile("org.springframework.session:spring-session:1.3.0.RELEASE") {
		exclude(module: "commons-logging")
    }
    compile("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    //compile("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}") //WEBSOCKET
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
		exclude(module: "commons-logging")
    }
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE") //API 문서화
	
	//database additional
	compile("org.hibernate:hibernate-core:${hibernateVersion}")
	compile("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
	compile("org.mariadb.jdbc:mariadb-java-client:1.4.6")
	compile("mysql:mysql-connector-java:6.0.5")
	
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")
	
	//external
	
}

eclipse {
	classpath {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}